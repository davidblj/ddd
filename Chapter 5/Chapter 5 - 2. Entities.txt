
Entities


Many things are defined by their identity, and not by any attribute

There are special technical challenges here, which I'll discuss in a bit, but first let's look at the
fundamental issue: Many things are defined by their identity, and not by any attribute. In our
typical conception, a person (to continue with the nontechnical example) has an identity that
stretches from birth to death and even beyond. That person's physical attributes transform and
ultimately disappear. The name may change. Financial relationships come and go. There is not a
single attribute of a person that cannot change; yet the identity persists. Am I the same person I
was at age five? This kind of metaphysical question is important in the search for effective domain
models. Slightly rephrased: Does the user of the application care if I am the same person I was at
age five?

A conceptual identity has to be matched between multiple implementations of the objects, its
stored forms.

Object modeling tends to lead us to focus on the attributes of an object, but the fundamental
concept of an ENTITY is an abstract continuity threading through a life cycle and even passing
through multiple forms. 

    "Some objects are not defined primarily by their attributes. They represent a thread of
    identity that runs through time and often across distinct representations. Sometimes
    such an object must be matched with another object even though attributes differ. An
    object must be distinguished from other objects even though they might have the same
    attributes. Mistaken identity can lead to data corruption"

An object defined primarily by its identity is called an ENTITY . ENTITIES have special modeling
and design considerations. They have life cycles that can radically change their form and content,
but a thread of continuity must be maintained.

Their identities must be defined so that they can be effectively tracked. 

    Their class definitions, responsibilities, attributes, and associations should revolve around who 
    they are, rather than the particular attributes they carry. 
    
Even for ENTITIES that don't transform so radically or have such complicated life cycles, placing 
them in the semantic category leads to more lucid models and more robust implementations

Of course, most " ENTITIES " in a software system are not people or entities in the usual sense of the
word. An ENTITY is anything that has continuity through a life cycle and distinctions independent of
attributes that are important to the application's user. It could be a person, a city, a car, a lottery
ticket, or a bank transaction.

Example:

    Consider transactions in a banking application. Two deposits of the same amount to the same
    account on the same day are still distinct transactions, so they have identity and are ENTITIES . On
    the other hand, the amount attributes of those two transactions are probably instances of some
    money object. These values have no identity, since there is no usefulness in distinguishing them.
    In fact, two objects can have the same identity without having the same attributes or even,
    necessarily, being of the same class. When the bank customer is reconciling the transactions of the
    bank statement with the transactions of the check registry, the task is, specifically, to match
    transactions that have the same identity, even though they were recorded by different people on
    different dates (the bank clearing date being later than the date on the check). The purpose of the
    check number is to serve as a unique identifier for this purpose, whether the problem is being
    handled by a computer program or by hand. Deposits and cash withdrawals, which don't have an
    identifying number, can be trickier, but the same principle applies: each transaction is an ENTITY ,
    which appears in at least two forms.

In conclusion:

    "When an object is distinguished by its identity, rather than its attributes, make this
    primary to its definition in the model. Keep the class definition simple and focused on
    life cycle continuity and identity. Define a means of distinguishing each object
    regardless of its form or history. Be alert to requirements that call for matching objects
    by attributes. Define an operation that is guaranteed to produce a unique result for
    each object, possibly by attaching a symbol that is guaranteed unique. This means of
    identification may come from the outside, or it may be an arbitrary identifier created by
    and for the system, but it must correspond to the identity distinctions in the model. The
    model must define what it means to be the same thing"


Identity is not intrinsic to a thing in the world; it is a meaning superimposed because it is useful.
In fact, the same real-world thing might or might not be represented as an ENTITY in a domain
model:

    An application for booking seats in a stadium might treat seats and attendees as ENTITIES . In the
    case of assigned seating, in which each ticket has a seat number on it, the seat is an ENTITY . Its
    identifier is the seat number, which is unique within the stadium. The seat may have many other
    attributes, such as its location, whether the view is obstructed, and the price, but only the seat
    number, or a unique row and position, is used to identify and distinguish seats.

    On the other hand, if the event is "general admission," meaning that ticket holders sit wherever
    they find an empty seat, there is no need to distinguish individual seats. Only the total number of
    seats is important. Although the seat numbers are still engraved on the physical seats, there is no
    need for the software to track them. In fact, it would be erroneous for the model to associate
    specific seat numbers with tickets, because there is no such constraint at a general admission
    event. In such a case, seats are not ENTITIES , and no identifier is needed



----------------------------------------- Modeling ENTITIES ---------------------------------------------



It is natural to think about the attributes when modeling an object, and it is quite important to
think about its behavior. But the most basic responsibility of ENTITIES is to establish continuity so
that behavior can be clear and predictable. They do this best if they are kept spare. Rather than
focusing on the attributes or even the behavior, strip the ENTITY object's definition down to the most 
intrinsic characteristics, particularly those that identify it or are commonly used to find or
match it. Add only behavior that is essential to the concept and attributes that are required by that
behavior. Beyond that, look to remove behavior and attributes into other objects associated with
the core ENTITY. 

Some of these will be other ENTITIES . Some will be VALUE OBJECTS , which is the
next pattern in this chapter. Beyond identity issues, ENTITIES tend to fulfill their responsibilities by
coordinating the operations of objects they own.

    Example at figure 5.5



----------------------------------------- Designing the Identity Operation -------------------------------



How do you know that two objects represent the same conceptual ENTITY ? The definition of identity
emerges from the model. Defining identity demands understanding of the domain.

Sometimes certain data attributes, or combinations of attributes, can be guaranteed or simply constrained to be 
unique within the system. This approach provides a unique key for the ENTITY .
Daily newspapers, for example, might be identified by the name of the newspaper, the city, and
the date of publication. (But watch out for extra editions and name changes!)

Often the ID is generated automatically by the system. The generation algorithm must guarantee
uniqueness within the system, which can be a challenge with concurrent processing and in
distributed systems

And in some cases, the uniqueness of the ID must apply beyond the computer system's boundaries.
For example, if medical records are being exchanged between two hospitals that have separate
computer systems, ideally each system will use the same patient ID, but this is difficult if they
generate their own symbol. In the US, the social security number is used as a unique ID.

Unique ids like these provided by external contexts are not foolproof. If we used a phone number as an id, 
the user might change it, or it might be reassigned to a new user. Your system should be able to handle those 
cases. 

You must also keep in mind that its easy enough to stamp each object with an ID, or to write an operation 
that compares two instances, but if these IDs or operations don't correspond to some meaningful 
distinction in the domain, they just confuse matters more.
